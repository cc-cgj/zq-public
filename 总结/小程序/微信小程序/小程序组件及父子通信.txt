
 一、创建组件

	概念：在小程序开发工具中鼠标右击，点击"新建Component"，为新建的组件命名之后，会自动生成组件对应的 4 个文件，后缀名分别为 .js ， .json ，

 .wxml 和 .wxss

	注意：

		1、在组件的js文件中必须调用 Component方法，在方法内传入一个对象，对象内指定组件的属性、数据、方法等。

		2、在组件中方法都定义在methods对象内的。

		3、生命周期函数无法在组件方法中通过 this 访问到。

		4、除继承样式(color...)外， app.wxss 中的样式、组件所在页面的样式对自定义组件无效。

		5、组件和引用组件的页面不能使用id选择器(#a)、属性选择器([a])和标签名选择器，请改用 class 选择器。

 二、注册子组件

	概念：在父组件的json文件中设置 "usingComponents" 的值来注册子组件

		例：
			{

				"usingComponents": { "组件标签名":"组件所属的文件夹路径/创建的组件名" }
			
			}

		使用：在页面的 .wxml 文件中，把注册的组件名称，以标签形式在页面上使用，即可把组件的内容展示到页面上。

		注意：
	
			引用组件时，输入的路径必须在创建的组件所属文件夹后添加创建的组件名，不用加文件后缀名，否则会报错。

				例："Tabs(自定义组件标签名)":"../../components/Tabs(文件夹名)/Tabs(创建的组件名)


 三、插槽

	概念：使组件标签内可以添加内容

	多个插槽

		例：

			1、在组件 js 中声明启用。

				Component({ options:{ multipleSlots: true } })

			2、在组件wxml文件中给插槽标签添加name属性

				<slot name="zs"></slot>

				<slot name="ls"></slot>

			3、在子组件标签内使用view标签等其他标签时，添加slot属性来区分所要替换的插槽

				<Cpt> 

					<view slot = "zs"><view> 

					<view slot = "ls"><view> 

				</Cpt>

	注意：

		1、在小程序中暂不支持作用域插槽

		2、默认插槽和多个(具名)插槽可以一起使用

 四、父传子 (通过标签属性的方式来传递)

	------传值

		在组件标签中通过自定义属性传值

		例：< Child 自定义属性名 = "{{ 传递的值 }}" >

		注意：一般属性名采用驼峰写法，如prop‐price，接收则为propPrice

	------子接收(properties)

		概念：

			1、properties是组件的对外属性，用来接收外界传递到组件中的数据。 类似于 Vue 中的 props

			2、组件的 properties 和 data 的用法类似且在同层级下的，在组件的 .wxml 文件中直接使用 {{ 数据名称 }} ；

			3、在组件的 .js 文件中通过this.data.数据名称来访问，this.setData({ 数据名称: 新值 })来修改数据。

			4、data 更倾向于存储组件的私有数据。properties 更倾向于存储外界传递到组件中的数据

		语法：
	
			Component( {

				properties: { 

					msg: { // 父组件使用子组件标签定义的自定义属性名 

						type: String, // 属性的数据类型。
		
						//可选值为 Number，String、Boolean、Object、Array、null(表示不限制类型)

						value: '' // 默认值 } 

				}
			} )
		
		调用：this.data.msg
		
		注意：
			
			1、传递的值必须为(父)页面的data里的数据，因为{{ 变量名 }}里的变量只会找data里的数据。

			2、父组件的值发生改变时，传递给子组件的值也会发生改变

			3、和页面不同，页面是存放事件回调函数在data同层级下的，而组件的事件处理函数，必须定义在 methods 节点中

 五、子传父(通过事件的方式传递)

	概念：子组件的事件处理函数来触发父组件的自定义事件，通过自定义事件的处理函数来接收子组件的传递的数据

	例：
		
		1、在子组件的标签上加入一个 自定义事件

			<Cpt tabs="{{tabs}}" binditemChange="handleItemChange" ></Cpt>

		2、在子组件的事件处理函数中通过triggerEvent方法来触发父组件中的自定义事件 同时传递数据给父组件

			this.triggerEvent( 'itemChange(父组件自定义事件的名称)',要传递的参数 )////this指向的是子组件的实例对象

	注意：

		1、添加自定义事件也需要加bind，但在触发时不需要加

		2、传递的数据没有限制

 六、获取子组件实例对象

	概念：父组件通过 this.selectComponent 方法获取子组件实例对象，便可以直接访问组件的任意数据和方法。

	例：

		1、在子组件标签中指定类名或id

			<Cpt class="cpt"></Cpt>

		2、在父组件的js文件中调用selectComponent 方法

			this.selectComponent( '.cpt' ) //this指向的是父组件的实例对象

	注意：

		1、this.selectComponent( '.cpt' )返回的是cpt这个组件的实例对象
			
		2、必须给子组件标签添加类名或id名才能通过selectComponent方法获取子组件实例对象



	一、Prop 类型

		字符串数组：props: ['title', 'likes', 'isPublished', 'commentIds', 'author']

		指定的值类型：props: {
  
				title: String,
  
				likes: Number,
  			
				isPublished: Boolean,
  
				commentIds: Array,
  
				author: Object,
  
				callback: Function,
  
				contactsPromise: Promise // 或任何其他构造函数

			}

		//这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。

	二、传递静态或动态Prop
		
		1、传入一个布尔值

			<!-- 包含该 prop 没有值的情况在内，都意味着 `true`。-->

			<!-- 如果没有在 props 中把 is-published 的类型设置为 Boolean，则这里的值为空字符串，而不是“true”。 -->

			<blog-post is-published></blog-post> props:['is-published']//""  props:{ is-published:Boolean } //true

			<!-- 即便 `false` 是静态的，我们仍需通过 `v-bind` 来告诉 Vue  -->

			<!-- 这是一个 JavaScript 表达式而不是一个字符串。             -->

			<blog-post :is-published="false"></blog-post>

			<!-- 用一个变量进行动态赋值。                                -->

			<blog-post :is-published="post.isPublished"></blog-post>

		2、传入一个对象的所有 property

			如果想要将一个对象的所有 property 都作为 prop 传入，可以使用不带参数的 v-bind (用 v-bind 代替 :prop-name)。


			例如，对于一个给定的对象 post：

				post: {  id: 1, title: 'My Journey with Vue' }

			<blog-post v-bind="post"></blog-post> ====> <blog-post v-bind:id="post.id" v-bind:title="post.title"></blog-post>

	三、Prop 验证

		概念

			我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个要求没有被满足，则 Vue 会在浏览器控制台中警告你。

		这在开发一个会被别人用到的组件时尤其有帮助。

			为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证要求的对象，而不是一个字符串数组。

		注意

			1、注意 prop 会在一个组件实例创建之前进行验证，所以实例的 property (如 data、computed 等) 在 default 或 validator 函数中

		是不可用的。

		例
 	
			props: {
    
				propA: Number,// 基础的类型检查 (`null` 和 `undefined` 值会通过任何类型验证)
    
				propB: [String, Number],// 多个可能的类型
    
				propC: { type: String,required: true },// 必填的字符串
    
				propD: { type: Number, default: 100 },// 带有默认值的数字
    
				// 带有默认值的对象
    
				propE: { 
				
					type: Object,
      				
					default() { return { message: 'hello' } }// 对象或数组的默认值必须从一个工厂函数返回
    
				},
    
				// 自定义验证函数
    
				propF: {  

					// 这个值必须与下列字符串中的其中一个相匹配

					validator(value) { return ['success', 'warning', 'danger'].includes(value) }

				},
    
				// 具有默认值的函数
    		
				propG: {
      
					type: Function,
      
					// 与对象或数组的默认值不同，这不是一个工厂函数——这是一个用作默认值的函数
      
					default() { return 'Default function' }
    
				}
  
			}

		})

	四、类型检查

		type 可以是下列原生构造函数中的一个：String | Number | Boolean | Array | Object | Date | Function | Symbol

		此外，type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认。来验证 author prop 的值是否是通过 new Person 创建的。

			例如，给定下列现成的构造函数：

				function Person(firstName, lastName) {  
				
					this.firstName = firstName
  
					this.lastName = lastName


				}

				父组件：<child-cpt obj = "new Person( 1,2 )" />

				子组件：props:{ author: Person } // { firstName:1,lastName:2  }

			注意：父子组件的共用是一个Person函数

	五、Prop 的大小写命名 (camelCase vs kebab-case)

		概念：

			HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase 

	(驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：

		例

			const app = Vue.createApp({})

			app.component('blog-post', { 

				// 在 JavaScript 中使用 camelCase
  
				props: ['postTitle'],
  
				template: '<h3>{{ postTitle }}</h3>'

			})

			<!-- 在 HTML 中使用 kebab-case -->

			<blog-post post-title="hello!"></blog-post>

		注意：重申一次，如果你使用字符串模板，那么这个限制就不存在了。

		



















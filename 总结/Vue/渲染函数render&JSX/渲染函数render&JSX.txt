
	2.x：https://cn.vuejs.org/v2/guide/render-function.html

	一、render( h( tag,props,children ) )
		
		概念：

			1、h() 函数是一个用于创建 VNode 的实用程序。也许可以更准确地将其命名为 createVNode()，但由于频繁使用，它被称为 h()

			2、h()返回一个”虚拟节点“，通常缩写为 VNode：一个普通对象，其中包含向 Vue 描述它应在页面上渲染哪种节点的信息，

		包括所有子节点的描述。它的目的是用于手动编写的渲染函数 


		参数：

			tag：( 必需的 )

				{String | Object | Function} 
  			
				一个 HTML 标签名、一个组件、一个异步组件、或 一个函数式组件、或resolve 了上述任何一种的一个 async 函数。。

			props:（ 可选的 ）

			 	{Object}
  
				与 attribute、prop 和事件相对应的对象。这会在模板中用到。
	
				例：

					{
  				
						// 与 `v-bind:class` 的 API 相同，接受一个字符串、对象或字符串和对象组成的数组

  						'class': { foo: true, bar: false },
	
  						// 与 `v-bind:style` 的 API 相同，接受一个字符串、对象，或对象组成的数组
 
  						style: { color: 'red',fontSize: '14px' },
  
						// 普通的 HTML attribute
  				
						attrs: { id: 'foo' },
  
						// 组件 prop
  
						props: { myProp: 'bar' },
  
						// DOM property
 
						domProps: { innerHTML: 'baz'//会覆盖 v-html 指令 },
  
						// 事件监听器在 `on` 内，
  
						// 但不再支持如 `v-on:keyup.enter` 这样的修饰器。
  					
						// 需要在处理函数中手动检查 keyCode。
  
						on: { click: this.clickHandler },
  
						// 仅用于组件，用于监听原生事件，而不是组件内部使用
  
						// `vm.$emit` 触发的事件。
  
						nativeOn: { click: this.nativeClickHandler },
  	
						// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`赋值，因为 Vue 已经自动为你进行了同步。
  			
  						directives: [{
							
							name: 'my-custom-directive',
      							
							value: '2',
     
							expression: '1 + 1',
      
							arg: 'foo',
      
							modifiers: { bar: true }
						}],

						// 作用域插槽的格式为：{ name: props => VNode | Array<VNode> }

						//应用场景：通过渲染函数向子组件中传递作用域插槽，可以利用 VNode 数据对象中的 scopedSlots 字段
  
						scopedSlots: { default: props => createElement('span', props.text) },
  
						// 如果组件是其它组件的子组件，需为插槽指定名称
  
						slot: 'name-of-slot',
  	
						// 其它特殊顶层 property
  
						key: 'myKey',
  
						ref: 'myRef',
  
						// 如果你在渲染函数中给多个元素都应用了相同的 ref 名，那么 `$refs.myRef` 会变成一个数组。
  				
  						refInFor: true
				
					}

	
			children：（ 可选的 ）

			 	{String | Array | }  //Object????????????
		
				子 VNodes, 

					1、使用 [h()、...] 构建或
  			
					2、使用字符串获取 "文本 VNode"/[ 变量1,'"文本 VNode1"'] 或
 
					3、有插槽的 对象( 该插槽对象一般为包含虚拟节点(对象)的数组 )。

		例：

			render( h ){ 

				return h( 'div',{}, ['Some text comes first.',h('h1', 'A headline'),h(MyComponent, { someProp: 'foobar' })] )
  
			}

		注意：

			1、函数render的返回值必须是 h()

			2、如果没有 prop，那么通常可以将 children 作为第二个参数传入。如果会产生歧义，可以将 null 作为第二个参数传入，

		将 children 作为第三个参数传入。
	
			3、组件树中的所有 VNode 必须是唯一的


	二、VNode 必须唯一

		1、组件树中的所有 VNode 必须是唯一的。这意味着，下面的渲染函数是不合法的：

			render: function (createElement) {
  
				var myParagraphVNode = createElement('p', 'hi')
  
				return createElement('div', [
    			
					myParagraphVNode, myParagraphVNode// 错误 - 重复的 VNode
    
  				])
		}

		2、如果你真的需要重复很多次的元素/组件，你可以使用工厂函数来实现。例如，下面这渲染函数用完全合法的方式渲染了 20 个相同的段落

			render: function (createElement) {
  			
				return createElement('div',
    
						Array.apply(null, { length: 20 }).map(function () {
      	
							return createElement('p', 'hi')
    
						})
  				)
			}


	三、插槽
			
		1、默认插槽

			概念：你可以通过 this.$slots 访问静态插槽的内容，每个插槽都是一个 VNode 数组

			例：

				render: function (createElement) {
  
					// `<div><slot></slot></div>`
  
					return createElement('div', this.$slots.default)

					}

				}

				console.log( this.$slots.defalut ) //[ vnode1( Object ),.... ] 

				注意：

					1、this.$slots.defalut返回的虚拟节点数组为真数组

					2、当组件没有包裹默认值时this.$slots.defalut为undefined


		2、 作用域插槽

			概念：this.$scopedSlots 访问作用域插槽，每个作用域插槽都是一个返回若干 VNode 的函数

			例：

				props: ['message'],

					render: function (createElement) {
  
						// `<div><slot :text="message"></slot></div>`
  
						return createElement('div', [
    
							this.$scopedSlots.default({ text: this.message })
  
						])
					}

			注意：this.$scopedSlots也可以访问默认插槽

		3、具名作用域插槽

			render: createElement => createElement( 'h1',[ this.$socpedSlots.name1( { ... } ),... ] )

		4、综合运用

			子组件：

				//child.js

				export default {

						
					render: function (createElement) {
  
  
						return createElement('span', [ 

							this.$slots.default(),

							this.$scopedSlots.default( { msg:'hello world' } ),

							this.$scopedSlots.customScope( { custom:"你好呀" } )	

						])

					}

				}

			父组件：

				import child ./child.js

				export default {
				
					components:{ child },
				
					//1、render
							
					render( createElement ){ 

						return createElement( 'h1',[ createElement( 'child',

							{

								scopedSlots:{

									default( props )=>( createElement( 'span',props.msg ) ),
								
									customScope( props )=>( createElement( 'span',props.custom ) )

								}


							},

							createElement( 'span',[ '我是传递给child的默认值' ] )


						)] )

					}

					最终渲染：

						hello world
					
						你好呀
							
						我是传递给child的默认值

					//2、template

					<child>

						我是传递给child的默认值 <br/>

						<template #default="props"> / <template v-slot="props">
									
							{{ props.msg }}<br/>

						</template>

						<template #customScope="props"> {{ props.custom }}<br/> </template>

					</child>

					最终渲染：
						
						我是传递给child的默认值

						hello world
					
						你好呀
							
				} 

	三、在Vue中使用JSX( React语法 )

		1、如果你写了很多 render 函数，可能会觉得下面这样的代码写起来很痛苦：

			createElement( 'anchored-heading', { props: { level: 1 } }, [ createElement('span', 'Hello'),' world!'] )

		2、这就是为什么会有一个 Babel 插件，用于在 Vue 中使用 JSX（参照React）语法，它可以让我们回到更接近于模板的语法上。

			https://github.com/vuejs/jsx

			安装：npm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props

			配置babel.config.js:

				module.exports = { presets: ['@vue/babel-preset-jsx'] }

			使用：

				
				// AnchoredHeading.vue (2.x)/MyComponent.vue (3.x)

					props:{

						level:Number
					
					},
						
					render() {

						console.log( this.$props.level ) 
        
						return (
            
						<div>
                
							<h2>{this.$scopedSlots.default ? this.$scopedSlots.default() : '我是默认的'}</h2>
                
							<h2>{this.$scopedSlots.foo ? this.$scopedSlots.foo() : '我是foo默认的'}</h2>
            
						</div>
        
						)
    					}

				
					// 3.x

					render() {
        
						return (
            
							<div>
                
								<h2>{this.$slots.default ? this.$slots.default() : '我是默认的'}</h2>
                
								<h2>{this.$slots.foo ? this.$slots.foo() : '我是foo默认的'}</h2>
            
							</div>
        
						)
    					}


				************************

				import AnchoredHeading from './AnchoredHeading.vue'

				new Vue({
  					
					el: '#demo',
  
					render: function () {
    
						return (
      
							<AnchoredHeading level= { 1 } >
								
								<span>Hello</span> world!

								 <template slot="foo">传递给foo的</template> //具名插槽
      
							</AnchoredHeading>

							//默认作用域插槽和具名作用域插槽

							 const scopedSlots = {
      										
								default: user => <div>{user.name}</div>,
      
								foo: user => <div>{user.name}</div>
    
							}

							<AnchoredHeading { ...{ scopedSlots } } />

							//3.x
    				
							// 默认插槽

							<MyComponent>{() => 'hello'}</MyComponent>

							// 具名插槽

							<MyComponent>{{
  
								default: () => 'default slot',
  
								foo: () => <div>foo</div>,
  					
								bar: () => [<span>one</span>, <span>two</span>]

							}}</MyComponent>
						)
  					}
				})
					
				
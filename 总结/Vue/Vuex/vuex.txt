
一、概念

	Vuex 是基于vue的一个依赖。实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间数据的共享。存储在 vuex 中的数据都是响应式的，

能够实时保持数据与页面的同步。Vuex一共有五种特性：state、mutations、actions、getters、modules

	注意：一般情况下，只有组件之间共享的数据，才有必要存储到 vuex 中；对于组件中的私有数据，依旧存储在组件自身的 data 中即可。 


二、安装

	在vue的图形化界面中可以直接安装该vuex依赖，或npm install vuex --save安装

	注意：安装完成后在vue项目的src文件夹会默认创建一个store文件夹和index.js

三、state

	概念：State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储

	存储数据方式：

		在store文件夹的index.js文件中有state对象来添加我们要共享的数据

		语法：

			export default new Vuex.Store({
			
				state:{ count:0 }

			})

		组件中访问State里属性的方式：
				
				第一种($store)：

					this.$store.state.全局数据名称-----如：{{ $store.state.count }}

					注意：在插值表达式内可以省略this

				第二种(按需导入)：

					1、先按需导入mapState函数： import { mapState } from 'vuex'

					2、然后将数据映射为计算属性： computed:{ ...mapState(['全局数据名称']) }

					3、直接在插值表达式使用：{{全局数据名称}}

					注意：按需导入的属性可以有多个，如：

							computed:{ ...mapState(['属性名1','属性名2']) }

							computed:{ ...mapState({ message: state => state.obj.message }) }

					  computed: mapState({
    						
    						count: state => state.count,// 箭头函数可使代码更简练

						countAlias: 'count', // 传字符串参数 'count' 等同于 `state => state.count`

    						// 为了能够使用 `this` 获取局部状态，必须使用常规函数
    
						countPlusLocalState (state) { return state.count + this.localCount } })

四、mutations
		
	概念：Mutation用于修改变更$store中的数据

	语法：

		export default new Vuex.Store({
			
				state:{ count:0 },
				
				mutations:{
					
					函数名(state,step){
								
						state.count+=step						

					}
	
				}

		})

	参数：

		state：函数的第一个形参永远都是state也就是$state对象,即为当前调用vuex的Store方法参数内的state属性，该属性值为一个对象，对象内包

含组件之间的公共数据。该对象在调用时该函数时默认传入，通过第一个形参接收。

		step：调用函数时传递的参数


	组件中调用mutation里函数的方式：//通过监听事件的回调函数来调用mutation里的函数

			第一种(commit)：

				methods:{
					
					btn(){
				
						this.$store.commit('函数名',传递的参数)
						
					}

				}

				
				
			第二种(按需导入指定函数)：
								
				1、先按需导入mapMutations函数：import { mapMutations } from 'vuex'

				2、在methods里引入相应的mutations里的函数：

						methods:{
					
							...mapMutations(['函数名'])
				
						}

				3、通过methods里的方法来调用mutations里的函数：

						methods:{
					
							...mapMutations(['函数名'])

							btn(){

								this.函数名(10)		
						
							}
				
						}

				注意：按需导入函数可以导入多个，如：...mapMutations(['函数名1','函数名2'])

				 ...mapMutations({
      
					add: 'increment' // 将 `this.add()` 映射为 `this.$store.commit('increment')`
    
				})								
					

	注意：

		1、只能通过 mutation 变更 Store 数据，不可以直接操作 Store 中的数据。

		2、参数只有两个，第一个为state对象，第二个为接收传递的值

		3、为什么不能在mutations里处理异步？

			如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，从而使调试带来困难。

			例：在mutations里使用定时器修改state里的数据后，在谷歌的Vue-devtools插件中是无法实时查看vuex的state里已经更新的数据。

五、actions

	概念：在mutations中不能编写异步的代码，会导致vue调试器的显示出错，如在函数内使用定时器。在vuex中我们可以使用Action来执行异步操作。
	
	语法：
	
		export default new Vuex.Store({
			
				state:{ count:0 },
				
				mutations:{
					
					add(state,step){
								
						state.count+=step						

					}
	
				},

				actions:{

					函数名(context,formal){

						setTimeout(()=>{
					
							context.commit('add',step)
		
							//调用mutation里的add函数,将形参step接收的值传递给mutation里的add函数
								
						})		

					}						

				}

		})

	参数：

		context：调用函数时默认会将传递一个对象，通过第一个形参来接收，对象内包含很多方法，如commit()

		formal：调用函数时传递的参数


	组件中调用action里函数的方式：//通过监听事件的回调函数来调用action里的函数

				第一种(dispatch)：

					methods:{

						btn(){
				
							this.$store.dispatch('函数名',传递的参数)

						}
			
					}

				第二种(按需导入函数)：

					1、先按需导入mapActions函数：import { mapActions } from 'vuex'

					2、在methods里引入相应的actions里的函数：

						mthods:{
			
							...mapActions(['函数名'])
					
						}

					3、通过methods里的方法来调用mutations里的函数:

						mthods:{
			
							...mapActions(['函数名'])
							
							btn(){
								
								this.函数名(10)

							}
					
						}

				
					注意：按需导入函数可以导入多个，如：...mapActions(['函数名1','函数名2'])

					...mapActions({
      	
						add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')`
    
					})
	
	注意：

		1、不能直接修改state里的数据，需要在函数内设置形参，通过该形参还调用mutation里的函数来操作state里的数据，调用时也可以传递参数。

	例：context.commit('函数名',传递的参数)
		
		2、store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise
		


六、getters

	概念：用于对Store中的数据进行加工处理形成新的数据，相当于计算属性computed

	语法：

		export default new Vuex.Stroe({
	
			state:{ count:10 },

			getters:{

				value(){ return 10 }

				newCount:( state,getters )=>{

					state.count = 20	

					return '最新的count值为：' + state.count + getters.value			
				}			
			
			}
		
		})

	参数：

		state：即为当前调用vuex的Store方法参数内的state属性，该属性值为一个对象，对象内包含组件之间的公共数据。该对象在调用时该函数时

默认传入，通过第一个形参接收。

	注意：

		1、它只会包装Store中保存的数据，并不会修改Store中保存的数据，当Store中的数据发生变化时，Getter生成的内容也会随之变化

		2、函数内得到的结果需要通过return来返回


	组件中访问getters里属性的方式：

			第一种($state)：
				
				this.$store.getters.属性名-----如：{{ $store.getters.newCount }}

					注意：
			
						1、在插值表达式内可以省略this

						2、getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。

			第二种(按需导入)：

					1、先按需导入mapGetters函数： import { mapGetters } from 'vuex'

					2、然后将getters里属性映射为计算属性： computed:{ ...mapGetters(['属性名']) }

					3、直接在插值表达式使用：{{属性名}}

					注意：

						1、按需导入的属性可以有多个，如：computed:{ ...mapGetters(['属性名1','属性名2']) }

						2、如果你想将一个 getter 属性另取一个名字，使用对象形式：

								...mapGetters({
  
									// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`
  
									doneCount: 'doneTodosCount'

								})			
			第三种(通过方法访问):

					getters: { 
  							
						getTodoById: (state) => (id) => { return state.todos.find(todo => todo.id === id)}

					}

					$store.getters.getTodoById(2) // -> { id: 2, text: '...', done: false }

					注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果

			



	

	一、概念

		只读代理是深层的：对任何嵌套属性的访问都将是只读的。它的 ref 解包行为与 reactive() 相同，但解包得到的值是只读的。

	要避免深层级的转换行为，请使用 shallowReadonly() 作替代。


	二、例

		// 普通对象

		const info = { name:"" }

		const readInfo = readonly( info )

		readInfo.name = "hello" //可修改的

		// 响应式对象reactive，场景：父组件传递给子组件的数据只能通过父组件来修改

		const info = reactive({ name:"" })

		const readInfo = readonly( info )

		readInfo.name = "hello" //会抛出警告

		// 响应式对象ref

		const info = ref({ name:"" })

		const readInfo = readonly( info )

		readInfo.value.name = "hello" //会抛出警告

			
		

		


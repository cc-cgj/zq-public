

	语法

		  setup(props, context) {}

	参数

		props：

			1、setup 函数中的 props 是响应式的，当传入新的 prop 时，它将被更新。

				export default {
  			
					props: { title: String },
  
					setup(props) {
    
						console.log(props.title)
  					}

				}

				// 注意：因为 props 是响应式的，你不能使用 ES6 解构，它会消除 prop 的响应性。

			2、通过toRefs，实现ES6解构

				如果需要解构 prop，可以在 setup 函数中使用 toRefs 函数来完成此操作
					
				import { toRefs } from 'vue'
		
				setup(props) {
  
					const { title } = toRefs(props)

 					 console.log(title.value)
				}

				注意：如果 title 是可选的 prop，则传入的 props 中可能没有 title 。在这种情况下，toRefs 将不会为 title 创建一个 ref 。			
			你需要使用 toRef 替代它

			3、解决使用toRefs的ES6解构时props没有title的情况

				import { toRef } from 'vue'

				setup(props) {
  
					const title = toRef(props, 'title')
  
					console.log(title.value)
				}
				

		Context：

			// Attribute (非响应式对象，等同于 $attrs)

			console.log(context.attrs)

    			// 插槽 (非响应式对象，等同于 $slots)
    
			console.log(context.slots)

    			// 触发事件 (方法，等同于 $emit)
    
			console.log(context.emit)

    			// 暴露公共 property (函数)
    
			console.log(context.expose)

			注意：

				1、attrs 和 slots 是有状态的对象，它们总是会随组件本身的更新而更新。这意味着你应该避免对它们进行解构，并始终以 attrs.x 
			
			或 slots.x 的方式引用 property

				2、与 props 不同，attrs 和 slots 的 property 是非响应式的。如果你打算根据 attrs 或 slots 的更改应用副作用，那么应该在 
			
			onBeforeUpdate 生命周期钩子中执行此操作。

				3、无法访问以下组件选项：data、computed、methods、$refs (模板 ref)
	
	注意

		1、在 setup 中你应该避免使用 this，因为它不会找到组件实例。setup 的调用发生在 data property、computed property 或 methods 被解析之前，
	
	所以它们无法在 setup 中被获取。

		2、setup 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。

		3、注意，从 setup 返回的 ref 在模板中访问时是被自动浅解包的，因此不应在模板中使用 .value。


	例：

		结合模板使用

			概念：如果 setup 返回一个对象，那么该对象的 property 以及传递给 setup 的 props 参数中的 property 就都可以在模板中访问到

			<template>
  
				<div>{{ collectionName }}: {{ readersNumber }} {{ book.title }}</div>

			</template>

			<script>
  
				import { ref, reactive } from 'vue'
			
				export default {
    
					props: { collectionName: String },
    
					setup(props) {
      
						const readersNumber = ref(0)
      
						const book = reactive({ title: 'Vue 3 Guide' })

      						// 暴露给 template
      
						return { readersNumber, book }
    					}
  				}

			</script>

		使用渲染函数	

			概念
			
				setup 还可以返回一个渲染函数，该函数可以直接使用在同一作用域中声明的响应式状态


			注意

				1、返回一个渲染函数将阻止我们返回任何其它的东西。从内部来说这不应该成为一个问题，但当我们想要将这个组件的方法通过模板 
		
			ref 暴露给父组件时就不一样了。

				2、我们可以通过调用 expose 来解决这个问题

					给它传递一个对象，其中定义的 property 将可以被外部组件实例访问：

						import { h, ref } from 'vue'

						export default {
  
							setup(props, { expose }) {
    
								const count = ref(0)
    
								const increment = () => ++count.value

   								expose({ increment })

    								return () => h('div', count.value)
  							}
						}

						// 这个 increment 方法现在将可以通过父组件的模板 ref 访问。

					注意：ref 会和在普通实例中一样被自动解包

			

			
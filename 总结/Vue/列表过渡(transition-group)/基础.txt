
	一、适用场景

		单个节点、多个节点，每次只渲染一个

		那么怎么同时渲染整个列表，比如使用 v-for？在这种场景下，我们会使用 <transition-group> 组件。

	二、特点

		1、默认情况下，它不会渲染一个包裹元素，但是你可以通过 tag attribute 指定渲染一个元素。

		2、过渡模式不可用，因为我们不再相互切换特有的元素。

		3、内部元素总是需要提供唯一的 key attribute 值。

		4、CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身。

	三、例

		列表的进入/离开过渡：

			<div id="list-demo">
  
				<button @click="add">Add</button>
  
				<button @click="remove">Remove</button>
  
				<transition-group name="list" tag="p">
    
					<span v-for="item in items" :key="item" class="list-item"> {{ item }} </span>
  
				</transition-group>

			</div>


		const Demo = {
  
			data() {
    
				return {
      
					items: [1, 2, 3, 4, 5, 6, 7, 8, 9],
      
					nextNum: 10
    				}
  			},
  
			methods: {
    
				randomIndex() { return Math.floor(Math.random() * this.items.length) },
    
				add() { this.items.splice(this.randomIndex(), 0, this.nextNum++) },
    
				remove() { this.items.splice(this.randomIndex(), 1) }
  
			}

		}

		Vue.createApp(Demo).mount('#list-demo')

		.list-item {
  
			display: inline-block;
  			
			margin-right: 10px;

		}

		.list-enter-active,

		.list-leave-active {
 		
			 transition: all 1s ease;

		}

		.list-enter-from,

		.list-leave-to {
  
			opacity: 0;
  
			transform: translateY(30px);

		}
		
		上面的示例有一些明显的缺陷：

			当某一项被插入或移除时，它周围的元素会立即发生“跳跃”而不是平稳地移动。

			我们可以通过添加一些额外的 CSS 规则来解决这个问题：

				.list-move, /* 对移动中的元素应用的过渡 */

				.list-enter-active,

				.list-leave-active {
  
					transition: all 0.5s ease;

				}

				.list-enter-from,

				.list-leave-to {
  
					opacity: 0;
  
					transform: translateX(30px);
				}

				/* 确保将离开的元素从布局流中删除
  
				以便能够正确地计算移动的动画。 */

				.list-leave-active {
  
					position: absolute;//元素发生移动时，布局流不会发生改变
				}




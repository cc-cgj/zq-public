JS高级------正则表达式
	
	一、概念
	
		正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、 数字或者下划线， 昵称输入
	框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词 (替换)，或从字符串中获取我们想要的特定部分(提取)等 。
	
		//正则表达式也是对象。

		//如果传入一个非正则表达式对象，则会隐式地使用 new RegExp(obj)将其转换为正则表达式对象。

		//字符串 ".gif" 会被转换成正则对象 /.gif/
	
	二、两种创建方式
			
		1、实例系统构造函数RegExp
		
			var regexp = new RegExp(/123/)		
			
		2、利用字面量创建
			
			var rg = /123/
	
	三、test()方法
		
		test用于检索字符串是否符合该规则，该对象会返回true或false，其参数为所要测试的字符串。

			例:
				console.log(rg.test(123)) //匹配字符中是否出现123，结果为true
				console.log(rg.test("abc")) //结果为false

			注意：

				test 方法的参数如果不是字符串，会经过抽象 ToString操作强制转成字符串，因此实际上测试的是字符串 "null" 和 
			"undefined"。


	exec()、match()、test()

		注意：

			1、当调用exec( )的正则表达式对象具有修饰符g时，它将把当前正则表达式对象的lastIndex属性设置为紧挨着匹配子串的字符位置，当同一个
		
		正则表达式第二次调用exec( )，它会将从lastIndex属性所指示的字符串处开始检索，如果exec( )没有发现任何匹配结果，它会将lastIndex置为0

			2、当match中的正则带有 g 标记，则它将所有匹配项的数组作为字符串返回，而不包含分组和其他详细信息

	四、构成
		
		1、一个正则表达式可以由简单的字符构成，比如 /abc/
		2、也可以是简单的字符和特殊字符的组合，比如 /^ab*c$/ 。
		3、其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。

	五、特殊字符
	
		查询：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions

		------边界符
		
			^：表示匹配行首的文本（以谁开始）
			$：表示匹配行尾的文本（以谁结束）

				注意：如果 ^和 $ 在一起，表示必须是精确匹配，即匹配的文本既是开始，又是结尾。

		------量词符
			
			概念：量词符用来设定某个模式出现的次数。		
		
				 * //重复0次或更多次
				 + //重复1次或更多次
		 		 ? //重复0次或1次
				{n} //同时重复n次
				{n,} //同时重复n次或更多次
				{n,m} //同时重复n到m次 			
 
		------标志符：

        		i：匹配的时候不区分大小写   例：/123/i
        		g：全部都要匹配		    例：/123/g
        		m: 多行匹配		    例：/123/m

			d:ES2022 

				以前，我们只能在字符串中获取正则表达式匹配的起始索引。

					/and/.exec('sun and moon') ---->// [ 'and', index: 4, input: 'sun and moon', groups: undefined ]

				我们现在可以指定一个 d 正则表达式标志来获取匹配开始和结束的两个索引。

					/and/d.exec('sun and moon')

						// [ 'and', index: 4, input: 'sun and moon', groups: undefined,indices: [ [ 4, 7 ]]
	
	六、字符类
		
		概念：字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。

		------[]:表示有一系列字符可供选择，只要匹配其中一个就可以了    例：/[a-zA-Z0-9]/

			注意：
				方括号内加^表示取反，例/[^0-9]/匹配的是除0到9以外的所有字符

	七、预定义类
		
		概念：指的是某些常见模式的简写方式.
	
			\d：匹配0-9之间的任一数字，相当于/[0-9]/
			\D：匹配所有0-9以外的字符，相当于/[[^0-9]]/
			\w：匹配任意的字母、数字和下划线，相当于/[0-9a-zA-Z]_/
			\W：匹配除所有字母、数字和下划线以外的字符，相当于/[^0-9a-zA-Z]/
			\s：匹配空格（包括换行符、制表符、空格符等），相当于/[\t\r\n\v\f]/
			\S：匹配非空格的字符，相当于/[^\t\r\n\v\f]/
			

			\ 转义符

			. 点符号用来查找除了换行符和行结束符以外的任意单个字符,例: /.粉/g.test('火锅粉') //true


			\n: 在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。

				比如 /apple(,)\sorange\1/ 匹配"apple, orange, cherry, peach."中的'apple, orange,' 。

			(x) 捕获性圆括号：匹配x，并捕获匹配项。

				/bar foo/.exec("bar foo") ['bar foo',index:0]
				/bar (foo)/.exec("bar foo") ['bar foo','foo',index:0]

				注意：当圆括号后跟有*时，那捕获组获得的是最后一个值 // 

					

			(?:x) 非捕获性圆括号： 匹配x，但是不捕获匹配项。

				/(?:foo)/.exec('foo') ['foo',index:0]
			

	八：正则替换replace()

		replace() 方法可以实现替换字符串操作，用来替换的第一个参数可以是一个字符串或是一个正则表达式。

		语法：
		
			str.replace(regexp|substr, newSubStr|function)

		例：

			str.replace(substr,newSubStr)：
			
				var str = "aa和bb"
				1、参数是字符串：console.log(str.replace("aa","AA") //AA和bb
				2、参数是正则表达式：console.log(str.replace(/ab/,"AA")) //AA和bb，一般用于过滤敏感词汇

				.replace(/\W+/g, '-') // 用短横线替换非单词字符
      					
				.replace(/(^-|-$)/g, '') // 删除前后短横线


			str.replace(regexp,function)：

				function( match,p1,p2, ...,offset,string ,NamedCaptureGroup )

					参数：

						match：匹配的子串。（对应于上述的$&。）

						p1,p2, ...：假如replace()方法的第一个参数是一个RegExp 对象，则代表第n个括号匹配的字符串。（对应于上述
					的$1，$2等。）例如，如果是用 /(\a+)(\b+)/ 这个来匹配，p1 就是匹配的 \a+，p2 就是匹配的 \b+。

						offset：匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 'abcd'，匹配到的子字符串是 'bc'，
					那么这个参数将会是 1）

						string：被匹配的原字符串。

						NamedCaptureGroup：命名捕获组匹配的对象

					例：

						const str = "str {{ msg }}"
		
						str.replace(/\{\{(.+)\}\}/, (...arg) => {
                
							console.log(arg); // ['{{ msg }}', ' msg ', 4, 'str {{ msg }}']

            					})

						str.replace(/\{\{.+\}\}/, (...arg) => {
                
							console.log(arg); // ['{{ msg }}', 4, 'str {{ msg }}']

            					})

					注意：返回值必须是字符串,否则匹配字符串替换为undefined

		
			


		注意：如果第一个参数是正则表达式，并且其为全局匹配模式，那么这个方法将被多次调用，每次匹配都会被调用。

	
		
		
	
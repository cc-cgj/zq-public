

	一、自定义构造函数的原型 //console.dir()
		
		概念：每个函数都有一个prototype（原型对象）属性，这个属性指向函数的原型对象，而之所以具有__proto__是因为在js中一切又皆对象
		
		------原型对象(prototype)

			属性：

				constructor：该对象指向的当前构造函数

				__proto__：该对象指向的是顶级对象Object

			作用：

				1、原型中包含所有实例对象共享的属性和方法。

				2、可以在原型对象内自定义添加构造函数的属性和方法或自定义修改构造函数的属性值和方法。

				3、原型中的属性和方法可以被该构造函数创建出来的对象直接使用，即 对象.方法() 或 对象.属性

		
			注意：

				构造函数中的对象原型(__proto__)与自己本身中的原型对象(prototype)内的对象原型(__proto__)不相同

	二、实例化对象的原型

		概念：每个对象(除null外)都有__proto__属性，这个属性为该对象的原型。
		
		------__proto__

			属性：
				
				constructor：该对象指向的当前实例化对象的构造函数

				__proto__：该对象指向的是顶级对象Object

			注意：
		
				实例化对象内的对象原型(__proto__)与对象原型(__proto__)内的对象原型(__proto__)是不相同的


	三、原型链

		概念：

			1、实例化对象下的原型（__proto__）下的构造函数( constructor )指向的是 构造函数的原型（proptotype）

			2、构造函数的原型（proptotype）下的__proto__指向的是系统构造函数Object原型（prototype）

			3、系统构造函数Object原型（prototype）下的__proto__指向的是null，这种关系就叫js原型链


		注意：	

			1、所有对象的顶级对象都为系统构造函数 Object()

			2、当给顶级对象Object的prototype里添加属性或方法时在其他构造函数(包括系统和自定义)或实例对象中都可访问到。

				例：

					Object.prototype.aa = "hello"

					function Person(){}

					console.log( Person.aa ) //"hello"

			3、所有对象的原型最终都指向系统构造函数Object()的实例化对象的原型，而Object()的实例化对象的原型指向的是null

	四、实例化对象如何查找是否具有该属性或方法

		1、查找当前实例对象的是否具有该属性

		2、查找当前实例该对象的构造函数的原型prototype

		3、查找当前实例该对象的构造函数的原型prototype下的原型__proto__

		4、查找系统构造函数Object的原型prototype

	五、实例化对象的缺陷

		概念：同一个构造函数所实例化的每个对象是不一样的，所以每个实例对象虽然都具有相同属性和方法，但其本质上其实是不同的

		解决办法：

			------通过原型对象(prototype)来共享数据

				1、每个构造函数都有默认有原型对象(prototype)，这是系统创建的

				2、这个属性是一个指针，指向一个对象，而这个对象的用途是包含所有实例化对象所共享的属性和方法。
										
	六、构造函数和实例化对象原型链总结：

		------构造函数内的原型对象(prototype)和通过该构造函数创建的实例化对象内的对象原型(__proto__)的区别：

			1、构造函数内的原型对象(prototype)内的对象原型(__proto__)跟实例化对象内的对象原型(__proto__)是不相同的

				//构造函数内的原型对象(prototype)内的对象原型(__proto__)指向的是 Object(顶级对象)

				//实例化对象内的对象原型(__proto__)指向的是当前实例该对象的构造函数

			2、构造函数内的原型对象(prototype)内的构造函数(constructor)跟实例化对象内的对象原型(__proto__)内的构造函数(constructor)

		是相同的

				//它们都指向当前构造函数	

			3、构造函数内的原型对象(prototype)内的对象原型(__proto__)跟实例化对象内的对象原型(__proto__)内的对象原型(__proto__)是

		相同的

				//因为它们都指向顶级对象Object

		------构造函数对象的对象原型(__proto__)和通过该构造函数创建的实例化对象内的对象原型(__proto__)的区别：

			1、构造函数对象的对象原型(__proto__)跟实例化对象内的对象原型(__proto__)是不相同的

				//指向不同，一个指向顶级对象，一个指向当前构造函数

			2、构造函数对象的对象原型(__proto__)内的对象原型(__proto__)跟实例化对象内的对象原型(__proto__)是不相同的




				
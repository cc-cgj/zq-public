


	概念

		一、

			Iterator是ES6中一个很重要概念，它并不是对象，也不是任何一种数据类型。因为ES6新增了Set、Map类型，他们和Array
			
			、Object类型很像，Array、Object都是可以遍历的，但是Set、Map都不能用for循环遍历，解决这个问题有两种方案，一种是为Set
			
			、Map单独新增一个用来遍历的API，另一种是为Set、Map、Array、Object新增一个统一的遍历API，显然，第二种更好，ES6也就顺
		
			其自然的需要一种设计标准，来统一所有可遍历类型的遍历方式。Iterator正是这样一种标准。或者说是一种规范理念。

		二、

			就好像JavaScript是ECMAScript标准的一种具体实现一样，Iterator标准的具体实现是Iterator遍历器。Iterator标准规
			
			定，所有部署了key值为[Symbol.iterator]，且[Symbol.iterator]的value是标准的Iterator接口函数(标准的Iterator接口函数: 
			
			该函数必须返回一个对象，且对象中包含next方法，且执行next()能返回包含value/done属性的Iterator对象)的对象，都称之为可
			
			遍历对象，next()后返回的Iterator对象也就是Iterator遍历器。

				例

					//obj就是可遍历的，因为它遵循了Iterator标准，且包含[Symbol.iterator]方法，方法函数也符合标准的
					
				Iterator接口规范。

					//obj.[Symbol.iterator]() 就是Iterator遍历器

					let obj = {
  
						data: [ 'hello', 'world' ],
  
						[Symbol.iterator]() {
    	
							const self = this;
    
							let index = 0;
    
							return {
      
								next() {
        
									if (index < self.data.length) {
          
										return {
            
											value: self.data[index++],
            
											done: false
          
										};
        
									} else {
          
										return { value: undefined, done: true };
        

									}
      
								}
    
							};
  
						}

					};
			

		三、

			ES6给Set、Map、Array、String都加上了[Symbol.iterator]方法，且[Symbol.iterator]方法函数也符合标准的Iterator
			
			接口规范，所以Set、Map、Array、String默认都是可以遍历的。

				例：

					//Array

						let array = ['red', 'green', 'blue'];

						array[Symbol.iterator]() //Iterator遍历器

						array[Symbol.iterator]().next() //{value: "red", done: false}

					//String

						let string = '1122334455';

						string[Symbol.iterator]() //Iterator遍历器

						string[Symbol.iterator]().next() //{value: "1", done: false}

					//set

						let set = new Set(['red', 'green', 'blue']);
	
						set[Symbol.iterator]() //Iterator遍历器

						set[Symbol.iterator]().next() //{value: "red", done: false}

					//Map
					
						let map = new Map();

						let obj= {map: 'map'};

						map.set(obj, 'mapValue');

						map[Symbol.iterator]().next()  {value: Array(2), done: false}


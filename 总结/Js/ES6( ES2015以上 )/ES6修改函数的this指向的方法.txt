
  //函数也属于对象 console.log(function(){} instanceof Object )---->true

-------改变函数内this指向  js提供了三种方法(函数的方法) 

	注意：

		1、自定义函数(命名函数) 不能在定义时直接使用该方法调用 //如 function aa(){}.apply() //会报错

		2、不能修改箭头函数的this指向，因为箭头函数的this指向只能从父函数内继承，若没有父函数则为window

 一、apply()

	语法：

		var obj = { name:'zs' }

		var aa = function( age1,age2 ){ 

			console.log( this ) //{ name:'zs' }

			console.log( age1,age2 ) //20 18

		}

		aa.apply( obj, [20,18] )

--------返回数组中的最大值：console.log( Math.max.apply( Math,[1,2,3,4] ) ) //4

	注意：
		1、使用该方法会自调用原函数，参数可以为空

		2、用来改变函数内部的this指向，通过第一个参数来指定
		
		3、第二个参数必须是数组(伪数组)，用来传递给函数的实参 
		
		4、函数内接收的是数组中的值，接收的不是一个数组，若数组的元素有几个，则函数的形参就有几个

二、call()

	语法：
	
		var obj = { name:'zs' }

		var aa = function( age1,age2 ){ 

			console.log( this ) //{ name:'zs' }

			console.log( age1,age2 ) //20 18

		}

		aa.call( obj,20,18 )

	注意：

		1、使用该方法会自调用原函数，参数可以为空

		2、用来改变函数内部的this指向，通过第一个参数来指定

		3、可以传递参数给函数，在第一个参数后指定值，多个值时用逗号分隔


三、bind()

	语法：
	
		var obj = { name:'zs' }

		var aa = function( age1,age2 ){ 

			console.log( this ) //{ name:'zs' }

			console.log( age1,age2 ) //20 18

		}

		aa.bind( obj,20,18 )


	注意：

		1、不会自调用原来的函数，参数可以为空

		2、可以改变原来函数内部的this指向，通过第一个参数指定

		3、可以传递参数给函数，设置的实参在第一个参数后，多个值时用逗号分隔

		4、不会改变原函数，返回的是原函数改变this指向之后产生新的函数


	
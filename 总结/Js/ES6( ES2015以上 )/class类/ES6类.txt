
一、概念

	传统的javascript中只有对象，没有类的概念。它是基于原型的面向对象语言。原型对象特点就是将自身的属性共享给新对象。如new一个构造函数，使用

prototype添加新属性时，此时再new一个该构造函数时，两个实例对象都具有同一个属性。但是这种方式比较麻烦也不易理解。

	所以ES6引入了Class（类）这个概念，通过class关键字可以定义类，通过 new 类名 来创建对象。所有实例该类的对象都共享同一属性和方法。

	构造函数的prototype属性，在 ES6 的类中继续存在，类的所有方法都定义在类的prototype属性上面。

	类指的就是一类对象，通过类创建对象。 对象则指的是具有的事物，它有特征(属性)和行为(方法)

	注意：

		1、在类中声明方法的时候，千万不要给该方法加上function关键字，直接使用函数名(){}创建

		2、方法之间不要用逗号分隔，否则会报错

		3、在ES6中类没有变量提升，必须先定义后实例化对象

		4、类相类似于一个构造函数，但里面只能定义属性和方法，添加属性的方式为 属性名 = {}，因为类只有实例化对象之后才能调用该属性。

		5、类里面公有的属性和方法一定要加this使用。

二、基本使用

	class 类名{

		name = "cgj"

		constructor( uname ){
			
			console.log(uname) //zs
			
		}

	}
	
	let Foo = class [类名(可选)]{};

	new 类名('zs') //通过new实例化类之后，会自动调用类里的constructor函数，该函数内的形参用来接收实例时传递的值

	注意：

		1、类名的首字母必须大写

		2、一般来说类的属性添加都是在constructor函数内

		3、类具有默认属性name，值一般为定义类的类名//Foo.name // 'Foo'


二、继承

	概念：可以使用父类的属性和方法

	如：

		class Person{ constructor(age){ this.uname = "zs" this.age = age } }

		class 子类名 extends Person{

			constructor(age){

				super(age)

				console.log(this.uname,this.age) //zs 20				
			
			}

		}
		
		new 子类名(20)//调用constructor函数

	注意：

		1、当子类没有constructor函数时，会默认具有constructor函数，在函数内部会默认调用并传递的参数给super函数

		1、当子类有constructor函数时，在构造函数内必须要使用super()来调用父类的constructor函数，否则会报错

		2、使用super()方法相当于调用父类constructor函数，所以可以传递参数给父类

		3、调用super方法时必须在子类this之前调用（必须先调用父类的构造方法再使用子类的构造方法）		
			
		4、也可以在子类自定义函数中调用父类的自定义函数，如：super.函数名()

		5、ES5和ES6继承的不同

			ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面。

			ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的
		构造函数修改this。

三、类this指向问题

	在构造函数中  this 指向的是创建的实例对象


---------------------------------------------------------------------------------------------------------------------------------------------



	constructor方法如果没有显式定义，会隐式生成一个constructor方法,默认返回实例对象this，但是也可以指定constructor方法返回一个全新的对象，

让返回的实例对象不是该类的实例。

	constructor中定义的属性可以称为实例属性（即定义在this对象上），

	constructor外声明的属性都是定义在原型上的，可以称为原型属性（即定义在class上)。

	hasOwnProperty()函数用于判断属性是否是实例属性。其结果是一个布尔值， true说明是实例属性，false说明不是实例属性。

	in操作符会在通过对象能够访问给定属性时返回true,无论该属性存在于实例中还是原型中。



	
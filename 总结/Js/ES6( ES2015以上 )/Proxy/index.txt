
	https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy

	一、概念

		可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操
	作，在进行这些操作时，可以添加一些需要的额外操作。

	二、语法

		const p = new Proxy(target, handler)

	三、参数
		
		target( 必填 )：要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。

		handler( 必填 )：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为、如set、get。

	四、方法

		Proxy.revocable()：创建一个可撤销的Proxy对象。

	五、注意

		1、使用 Proxy 的一个难点是 this 绑定。我们希望任何方法都绑定到这个 Proxy，而不是目标对象，这样我们也可以拦截它们。

			解决方案：

				值得庆幸的是，ES6 引入了另一个名为 Reflect 的新特性，它允许我们以最小的代价消除了这个问题：

					const dinner = { meal: 'tacos' }

					const handler = { 

						get(target, property, receiver) {
    
							return Reflect.get(...arguments)

						//arguments

							[ { meal:'tocos' },'meal',*proxy* ]
  
						}
					}

					const proxy = new Proxy(dinner, handler)

					console.log(proxy.meal)// tacos
	


		
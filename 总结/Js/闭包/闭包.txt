

	一、闭包函数

		概念：

			1、在函数的内部声明的函数引用了外部函数声明的变量导致原本外部函数在调用时没有在内存中及时销毁

			2、在函数内部再声明一个函数且函数的返回值为声明的那一个函数。

	二、闭包

		概念：内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被调用之后（释放内存）。

		优点：

			1、让外部可以访问或修改函数内部定义的变量；

			2、可以避免使用全局变量，防止全局变量污染；

		缺点：

			1、局部变量（函数内声明的变量）会常驻在内存中；

			2、会造成内存泄漏（有一块内存空间被长期占用，而不被释放）

		核心：利用数据缓存

		具体：

			1、外部函数的返回值为内部函数

			2、在内部函数操作外部函数定义的变量

			3、将外部函数的返回值赋值给新的一个变量

			4、调用新变量，此时修改的是外部函数的变量，但由于此时外部函数并没有调用，则无法释放内存，即外部函数的变量会保存在内
		存中。

			5、重新调用新变量时，此时外部函数的变量值为上一次调用新变量修改后的值。

		例：

			function fn(){
	
				var num = 1

				return function(){

					num++

					console.log( num )

				}

			}

			var aa = fn()

			aa()//2

			aa()//3

		解决方案：

			aa  = null




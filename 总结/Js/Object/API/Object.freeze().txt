

	一、概念

		1、Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；

		2、冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改

	已有属性的值。

		3、冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。

	二、语法

		Object.freeze(obj)

	三、参数

		obj：要被冻结的对象。

	四、返回值

		被冻结的对象。

	五、注意

		1、被冻结对象自身的所有属性都不可能以任何方式被修改。任何修改尝试都会失败，无论是静默地还是通过抛出TypeError异常

	（最常见但不仅限于strict mode（严格模式））。

		2、数据属性的值不可更改，访问器属性（有getter和setter）也同样（但由于是函数调用，给人的错觉是还是可以修改这个属性）。

	如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。数组作为一种对象，被冻结，其元素不能被修改。

	没有数组元素可以被添加或移除。

		3、这个方法返回传递的对象，而不是创建一个被冻结的副本。

		4、在Vue中使用该方法可以提高渲染速度，因为这会告诉Vue该值不会做为响应式数据去定义。

	六、例

		1、冻结对象

			var obj = { foo: 'bar'}

			// 作为参数传递的对象与返回的对象都被冻结

			// 所以不必保存返回的对象（因为两个对象全等）

			var o = Object.freeze(obj);

			o === obj; // true

			Object.isFrozen(obj); // === true

			// 现在任何改变都会失效
			
			obj.foo = 'quux'; // 静默地不做任何事 

			// 静默地不添加此属性

			obj.quaxxor = 'the friendly duck';

			// 在严格模式，如此行为将抛出 TypeErrors

			;(function (){
   
				obj.foo = 'sparky'; // throws a TypeError
  
				delete obj.quaxxor; // 返回true，因为quaxxor属性从来未被添加
  
				obj.sparky = 'arf'; // throws a TypeError

			})()

			// 试图通过 Object.defineProperty 更改属性

			// 下面两个语句都会抛出 TypeError.

			Object.defineProperty(obj, 'ohai', { value: 17 });

			Object.defineProperty(obj, 'foo', { value: 'eit' });

			// 也不能更改原型
		
			// 下面两个语句都会抛出 TypeError.

			Object.setPrototypeOf(obj, { x: 20 })

			obj.__proto__ = { x: 20 }

		2、冻结数组

			let a = [0];

			Object.freeze(a); // 现在数组不能被修改了.

			a[0] = 1 

			a // [0]


		3、浅冻结

			obj1 = { internal: {}};

			Object.freeze(obj1);

			obj1.internal.a = 'aValue';

			obj1.internal.a // 'aValue'

		4、深冻结函数

			function deepFreeze(obj) {

 	 			var propNames = Object.getOwnPropertyNames(obj);// 取回定义在obj上的属性名

  				// 在冻结自身之前冻结属性
  
				propNames.forEach(function(name) {
    
					var prop = obj[name];

   					// 如果prop是个对象，冻结它
    
					if (typeof prop == 'object' && prop !== null) deepFreeze(prop);	
  	
				});

  				// 冻结自身(no-op if already frozen)
  
				return Object.freeze(obj);
			}

			obj2 = { internal: {} };

			deepFreeze(obj2);

			obj2.internal.a = 'anotherValue';

			obj2.internal.a; // undefined

	六、Notes

		在ES5中，如果这个方法的参数不是一个对象（一个原始值），那么它会导致 TypeError。在ES2015中，非对象参数将被视为要被冻结的普通对象，

	并被简单地返回。


			



		一、赋值对象是一个obj

		// this.objData=Object.assign({}, row) //这样就不会共用同一个对象 //可能有无效的情况: { obj:[ { aa:1 } ] }

		建议使用：

			Object.assign( targetObj,copyObj1,copyObj2,... )

				概念：Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。

				注意：
	
					1、如果目标对象(targetObj)与源对象(copyObj1...)有同名属性，或多个源对象有同名属性，

				则后面的属性会覆盖前面的属性。

					2、如果只有一个参数，Object.assign会直接返回该参数。

					3、如果该参数不是对象，则会先转成对象，然后返回。	

					4、由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。

					5、如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，

			如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。

			//https://www.jianshu.com/p/d5f572dd3776

		二、数组我们也有一个巧妙的防范

		newArray = oldArray.slice(); //slice会clone返回一个新数组

			注意：数组中的元素不包括对象



		三、深拷贝

			1、JSON.parse( JSON.stringify( obj ) )

				注意：但是这种方式存在弊端，会忽略undefined、symbol和函数

					例：

						const obj = {
    
								name: 'A',
   								
								name1: undefined,
    
								name3: function() {},
    
								name4:  Symbol('A')

						}

						const obj2 = JSON.parse(JSON.stringify(obj));
		
						console.log(obj2); // {name: "A"}
			
			2、_.cloneDeep()

			3、jQuery.extend()

			

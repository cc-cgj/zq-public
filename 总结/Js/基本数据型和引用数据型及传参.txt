

一、简单数据类型

	概念：

		简单类型（基本数据类型、值类型）：在存储时变量中存储的是值本身，包括string，number，boolean，undefined，null

--------NaN

		概念：数据类型转换时，代表一个非数值

		注意：isNaN（变量名）用来判断一个变量是否为非数字的类型，返回 true 或者 false

--------字符串转义符(都是添加在字符串里)

		概念：都是以\开头，如\n：换行，\b:空格，\t:缩进，\".....\":双引号

--------字面量

		概念：表示如何表达这个值，数字字面量：1，2；布尔字面量：true
		
--------数字型进制 (在JS中八进制前面加0，十六进制前面加0x)

		1.八进制数字序列范围：0~7 var num1 = 07; // 对应十进制的7

		2.十六进制数字序列范围：0~9以及A~F var num = 0xA;

--------JavaScript中数值的最大和最小值:

		1.Array.MAX_VALUE(最大值)

		2.Array.MIN_VALUE(最小值)
	
--------数据类型转换：

		字符串：变量名.toString()和String(变量名/值)------>当变量类型为undefined或者null的时候只能使用String()来强制转换 
			
		数值：
				
			Number(变量名/值)//强制转换:

			console.log(Number(null/undefined)) //0

--------parseInt

		概念：解析一个字符串，并返回一个整数。

		转换规则：从第一个开始转换，遇到字符就停止

--------parseFloat

		概念：可解析一个字符串，并返回一个浮点数

		转换规则：当遇到第一个点的时候转点后数字，之后遇到字符就停止。如果字符为e表示科学计算法无穷大，否则停止转换字符之前的内容

	隐式类型转换：

			console.log(200 - "100")//100
			console.log(100 + true)//101
			console.log(100 + false)//100

	console.log(100 + undefined)//NaN
	console.log(100 + null)//100
	console.log(100 + NaN)//NaN(任何一个值跟NaN相加都为NaN)

	注意：

		1、简单数据类型 null 返回的是一个空的对象

			var 变量名 = null; 

			console.log(typeof 变量名); //Object

		2、如果有个变量我们以后打算存储为对象，暂时没想好放啥， 这个时候就给 null 

		3、简单数据类型 是存放在栈里面 在桟中直接开辟一个空间来存放值 

	内存表现形式：

		简单数据类型存放在桟中，通过var创建变量，值为简单数据类型，此时桟中就会新建一个内存空间来存放该值，若将该变量赋值给另外一个变量

	时，则会将该变量在桟中存放的值复制一份给另外一个变量，相当于重新开辟了一个内存空间。

		var a = 1
		var b = a
		    b = 2
		console.log(a,b)//1,2

二、复杂数据类型

	复杂数据类型（引用类型）：在存储时变量中存储的仅仅是地址（引用），通过 new关键字创建的对象（系统对象、自定义对象），如 Object、Array、

Date等；

	注意：

		复杂数据类型 首先在栈里面存放地址 十六进制表示然后这个地址指向堆里面的数据

	内存表现形式：

		复杂数据类型存放在堆中，所以对象的属性和方法存放在堆中，引用该对象的地址放在桟中，通过var创建一个有属性、方法的对象，然后在将

	该对象赋值给另外一个对象，此时只是在桟中的地址复制了一份给另外一个对象，它们的属性和方法还是同一个。

		例：

			var obj1 = { name:"zs" }
		
			var obj2 = obj1

			obj2.name = "ls"
	
			console.log(obj1,obj2)//ls,ls

三、简单类型传参

	函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时， 其实是把变量在栈空间里的值复制了一份给形参，那么在方法

内部对形参做任何修改，都不会影响到的外部变量。

四、复杂数据类型传参

	函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是

同一个堆地址，所以操作的是同 一个对象。




	执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；

	全局Script代码执行完毕后，调用栈Stack会清空；

	从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；

	继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。注意，如果在执行microtask	

的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；

	microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；

	取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；

	执行完毕后，调用栈Stack为空；

	重复第3-7个步骤；

	重复第3-7个步骤；

	......


	----------------------------

	可以看到，这就是浏览器的事件循环Event Loop

		这里归纳3个重点：

			宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；

			微任务队列中所有的任务都会被依次取出来执行，直到microtask queue为空；

			图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的
		microtask之后，下一个macrotask之前，紧跟着执行UI render。


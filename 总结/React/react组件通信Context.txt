
 一、概念

	在传统的React应用中，数据是通过 props 属性自上而下（由父及子）进行传递的，如父传孙时必须要通过子组件才能将数据传递给子组件中嵌套的孙组件

。Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。

 
 二、基本使用

	1、创建一个上下文的容器(组件)。defaultValue可以设置共享的默认数据，在没有匹配到 Provider 时。

		const { Provider, Consumer } = React.createContext(defaultValue);

		注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效。

	2、在父组件中使用Provider(生产者)标签包裹，里面可以渲染对应的内容 //value属性则是用于传递数据给Consumer消费组件。

		class Parent extends React.Component{
			
			state = { msg:"hello world" }

			render(){ return 

				(<> 
					<Provider value = { this.state.msg }>  < Son/> </Provider>

				</>)

			}		


		}

		注意：

			1、多个 Provider 也可以嵌套使用，里层的会覆盖外层的value的数据。
		
			2、当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。

	3、在父组件的后代组件中使用Consumer(消费者)标签包裹，里面根据上下文，进行渲染相应内容

		class Son extends React.Component{ render(){ return <Grandson/> } } 

		class Grandson extends React.Component{

			render(){ return 

				(<> 
					<Consumer>

						{ (v)=> return { <h1> v(hello world) </h1> } } //形参v的值为Provider生产组件value的属性值

					</Consumer>

				</>)

			}

		}

		注意：
			
			1、必须通过函数的方式拿到共享的数据，即获取Provider的value属性的值或defaultValue

			2、Consumer消费标签必须嵌套在Provider生产组件下面，才能通过回调的方式拿到共享的数据。也可以单独使用，函数形参的值则

		是defaultValue
		
			3、函数必须要有return，返回的是jsx语句

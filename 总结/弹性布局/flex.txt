
------confirm()和alert()区别

	1、confirm()方法用于显示一个带有指定消息和确认及取消按钮的对话框，如果访问者点击"确定"，此方法返回true，否则返回false。

	2、alert() 方法用于显示带有一条指定消息和一个 OK 按钮的警告框，没有返回值。返回的是undefined。。

	3、参数：要在页面上弹出的对话框中显示的纯文本

--------------------移动端--flex(弹性)布局--------------------


一、注意项

	1、需要给父盒子添加flex属性(diplay:flex;)

	2、子元素的 float、clear 和 vertical-align 属性将失效。

	3、默认会将所有子盒子转变为块元素

	4、就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式

二、父盒子常见属性

	------flex-direction
		
		概念：设置主轴的方向，即子元素在主轴上排列的方向。默认为x轴方向

		参数：

			1、flex-direction: row(默认值) | row-reverse | column | column-reverse ;

			2、flex-direction: 从左到右 | 从右到左 | 从上到下 | 从下到上

	------justify-content

		概念：设置子元素在主轴上的排列方式

		参数：

			1、justify-content: flex-start; //默认值，从头部开始。如果是主轴为x轴，则是从左到右
	
			2、justify-content: flex-end; //从尾部开始排列

			3、justify-content: center; //在主轴居中对齐 （如果主轴是x轴则是 水平居中）

			4、justify-content: space-around; //平分剩余空间

			5、justify-content：space-between; //子项在侧轴先分布在两头，再平分剩余空间（重要）	

	------flex-wrap

		概念：设置子元素是否换行。默认情况父元素中的所有子元素都是排列在一行的。

		参数：

			1、flex-wrap：nowrap; //不换行。默认

			2、flex-wrap：wrap; //换行

	------align-items：（单行）

		概念：设置子元素在侧轴上的排列方式。若主轴为x轴，则侧轴为y轴

		参数：

			1、align-items：flex-start; //子元素从侧轴的头部开始排列。默认值

			2、align-items：flex-end; //在侧轴的尾部开始排列

			3、align-items：center; //在侧轴中间依次排列

			4、align-items：baseline; //按照所有子元素的第一行文字的基线对齐。

			5、align-items：strech(默认值); //如果子项未设置高度或设为auto，子项的高度将被拉伸直至跟父项的高度相同时再进行排列。

	------align-content：（多行）

		概念：设置子元素在侧轴上的排列方式。若主轴为x轴，则侧轴为y轴

		参数：

			1、align-content：flex-start; //子元素从侧轴的头部开始排列。默认值

			2、align-content：flex-end; //在侧轴的尾部开始排列

			3、align-content：center; //在侧轴中间依次排列

			4、align-content：space-around; //子项在侧轴平分剩余空间

			5、align-content：space-between; //子项在侧轴先分布在两头，再平分剩余空间

			6、align-content：stretch; //设置子项元素高度平分父元素高度，再进行排列

	------flex-flow

		概念：复合属性，相当于同时设置了 flex-direction 和 flex-wrap，第一个参数为flex-direction的属性值，第二个参数为flex-wrap的属性值

		例：
			
			flex-flow：column wrap; //主轴方向为从下到上，子项溢出时换行

三、子元素的常见属性

	------flex-grow

		概念：定义子项目的放大比例，默认为0，即如果存在剩余空间，也不放大。

		例：flex-grow: <number>; /* default 0 */

		注意：如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则

	前者占据的剩余空间将比其他项多一倍。

	------flex-shrink

		概念：定义子项目的缩小比例，默认为1，即如果空间不足，该子项目将缩小。

		例：flex-shrink: <number>; /* default 1 */

		注意：如果所有子项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则

	空间不足时，前者不缩小。负值对该属性无效。

	------flex-basis

		概念：定义在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，

	即项目的本来大小。

		例：flex-basis: <length> | auto; /* default auto */

		注意：它可以设为跟width或height属性一样的值（比如350px），则表示该子项目将占据固定空间。

	------flex 

		概念：

			1、定义子项目分配剩余空间，将父项空间进行等份划分，而用flex来表示占多少份数。

			2、flex属性是flex-grow, flex-shrink 和 flex-basis的简写默认值为0 1 auto。后两个属性可选。

		语法：flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]

		例：flex：3;

		注意：

			1、通过设置数值来决定所占的份数，不用加单位

			2、该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。

			3、建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。

	------align-self 

		概念：
			1、align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。

			2、默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。
		
		参数：跟align-items的属性值是一样的


	------order

		概念:设置项目的排列顺序。数值越小，排列越靠前，默认为0。

		例：order: ‐1; //此时当前子项在所有子项中排列在最前面。

		注意：和 z-index 不一样，不加单位。
			
